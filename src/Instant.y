/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.h"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  extern char *yytext;
  fprintf(stderr,"error: line %d: %s at %s\n", 
    yy_mylinenumber, str, yytext);
}



static Program* YY_RESULT_Program_ = 0;
Program* pProgram(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program* pProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

static Stmt* YY_RESULT_Stmt_ = 0;
Stmt* pStmt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}
Stmt* pStmt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}

static ListStmt* YY_RESULT_ListStmt_ = 0;
ListStmt* pListStmt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStmt_;
  }
}
ListStmt* pListStmt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStmt_;
  }
}

static Exp* YY_RESULT_Exp_ = 0;
Exp* pExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}
Exp* pExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program* program_;
  Stmt* stmt_;
  ListStmt* liststmt_;
  Exp* exp_;
}

%token _ERROR_
%token _SYMB_0    //   =
%token _SYMB_1    //   ;
%token _SYMB_2    //   +
%token _SYMB_3    //   -
%token _SYMB_4    //   *
%token _SYMB_5    //   /
%token _SYMB_6    //   (
%token _SYMB_7    //   )

%type <program_> Program
%type <stmt_> Stmt
%type <liststmt_> ListStmt
%type <exp_> Exp1
%type <exp_> Exp2
%type <exp_> Exp3
%type <exp_> Exp4
%type <exp_> Exp

%start Program
%token<int_> _INTEGER_
%token<string_> _IDENT_

%%
Program : ListStmt {  std::reverse($1->begin(),$1->end()) ;$$ = new Prog($1); YY_RESULT_Program_= $$; } 
;
Stmt : _IDENT_ _SYMB_0 Exp {  $$ = new SAss($1, $3); YY_RESULT_Stmt_= $$; } 
  | Exp {  $$ = new SExp($1); YY_RESULT_Stmt_= $$; }
;
ListStmt : /* empty */ {  $$ = new ListStmt(); YY_RESULT_ListStmt_= $$; } 
  | Stmt {  $$ = new ListStmt() ; $$->push_back($1); YY_RESULT_ListStmt_= $$; }
  | Stmt _SYMB_1 ListStmt {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListStmt_= $$; }
;
Exp1 : Exp2 _SYMB_2 Exp1 {  $$ = new ExpAdd($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp2 {  $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp2 : Exp2 _SYMB_3 Exp3 {  $$ = new ExpSub($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp3 {  $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp3 : Exp3 _SYMB_4 Exp4 {  $$ = new ExpMul($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp3 _SYMB_5 Exp4 {  $$ = new ExpDiv($1, $3); YY_RESULT_Exp_= $$; }
  | Exp4 {  $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp4 : _INTEGER_ {  $$ = new ExpLit($1); YY_RESULT_Exp_= $$; } 
  | _IDENT_ {  $$ = new ExpVar($1); YY_RESULT_Exp_= $$; }
  | _SYMB_6 Exp _SYMB_7 {  $$ = $2; YY_RESULT_Exp_= $$; }
;
Exp : Exp1 {  $$ = $1; YY_RESULT_Exp_= $$; } 
;

